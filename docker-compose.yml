services:
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - monitoring
      
  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    volumes:
      - kafka_data:/kafka
    networks:
      - monitoring
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD-SHELL", "netstat -tln | grep 9092 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 10

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "echo stat | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # kafka:
  #   image: apache/kafka:3.7.0
  #   container_name: kafka
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     - KAFKA_NODE_ID=1
  #     - KAFKA_PROCESS_ROLES=broker,controller
  #     - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
  #     - KAFKA_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
  #     - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
  #     - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
  #     - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
  #     - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
  #   volumes:
  #     - kafka_data:/tmp/kafka-logs
  #   networks:
  #     - monitoring
  #   healthcheck:
  #     test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --list || exit 1"]
  #     interval: 5s
  #     retries: 10

  postgres:
    image: postgres:16
    container_name: postgres
    env_file:
      - ./post-service/.env      # Переменные окружения для БД
    ports:
      - "5433:5432"              # внешний порт 5433 для хоста, внутри контейнера 5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - monitoring
    depends_on:
      - kafka
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      # Сколько раз Docker попытается выполнить тест, прежде чем считать контейнер unhealthy
      retries: 5

  post-service:
    build: ./post-service
    env_file:
      - ./post-service/.env
    ports:
      - "8000:8000"
    networks:
      - monitoring
    command: ["sh", "-c", "./migrator --migrations-path ./migrations && ./post-service"]
    depends_on:
      postgres: # Ждем пока health у postgres будет пройден
        condition: service_healthy
      kafka: # Ждем пока health у kafka будет пройден
        condition: service_healthy
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    #   start_period: 30s

  notification-service:
    build: ./notification-service
    ports:
      - "8001:8001"
    networks:
      - monitoring
    depends_on:
      kafka: # Ждем пока health у kafka будет пройден
        condition: service_healthy

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - monitoring

  bombardier:
    image: alpine/bombardier
    command: [
      "-c", "100",
      "-d", "30s",
      "-m", "POST",
      "-H", "Content-Type: application/json",
      "-b", '{"title":"Test","author":"Bombardier","content":"Test content","tags":["test"]}',
      "http://post-service:8000/posts"
    ]
    networks:
      - monitoring
    depends_on:
      - post-service  
    # depends_on:
    #   post-service:
    #     condition: service_healthy

volumes:
  postgres_data:
  kafka_data:

networks:
  monitoring:
    driver: bridge
